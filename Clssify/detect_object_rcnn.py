# import the necessary packages
import time

from System.nms import non_max_suppression
from System import config
from keras.applications.mobilenet_v2 import preprocess_input
from keras.utils.image_utils import img_to_array
from keras.models import load_model
import numpy as np
import argparse
import imutils
import pickle
import cv2
from preprocessing import imagetoarraypreprocessor
from preprocessing import simplepreprocessor
from datasets import simpledatasetloader
from keras.models import load_model
from imutils import paths
import numpy as np
import cv2
import argparse


classLabels = ['Toc do toi da cho phep 5 km/h', 'Toc do toi da cho phep 15 km/h', 'Cam di thang', 'Cam re trai',
               'Cam re trai va re phai', 'Cam re phai', 'Cam vuot', 'Cam quay dau xe','Cam xe o to', 'Cam bop coi', 'Het han che toc do toi da 40km/h', 'Het han che toc do toi da 50km/h',
               'Toc do toi da cho phep 30 km/h', 'Di thang va re phai', 'Di thang',
               'Re trai', 'Re trai va re phai', 'Re phai', 'Huong phai di vong chuong ngai vat phai',
               'Huong phai di vong chuong ngai vat phai',
               'Noi giao nhau chay theo vong xuyen', 'Duong gioi han', 'An coi', 'Toc do toi da cho phep 40 km/h',
               'Chi danh cho xe dap',
               'Duoc phep quay dau xe', 'Re trai va/hoac phai de di duong vong', 'Giao nhau co tin hieu den',
               'Nguy hiem khac', 'Duong danh cho nguoi di bo phia truoc',
               'Co xe dap phia truoc', 'Truong hoc o phia truoc', 'Duong cong ben phai', 'Duong cong ben trai',
               'Toc do toi da cho phep 50 km/h', 'Xuong doc',
               'Len doc', 'Cham lai', 'Nga ba duong phu phia truoc ben trai', 'Nga ba duong phu phia truoc ben phai',
               'Duong xuyen lang',
               'Duong cong doi, re trai truoc, sau do re phai', 'Giao nhau voi duong sat khong co rao chan',
               'Phia truoc dang thi cong', 'Nhieu duong cong',
               'Toc do toi da cho phep 60 km/h', 'Giao nhau voi duong sat co rao chan', 'Doan duong hay xay ra tai nan',
               'Dung', 'Duong cam', 'Khong dung lai',
               'Khong co loi vao cho giao thong xe co', 'Cho di', 'Dieu khien', 'Toc do toi da cho phep 70 km/h',
               'Toc do toi da cho phep 70 km/h', 'Cam di thang va re trai', 'Cam di thang va re phai']

# load the our fine-tuned model and label binarizer from disk
print("[INFO] loading model and label binarizer...")
model = load_model(config.MODEL_PATH)
modelClassify = load_model("miniVGGNet.hdf5")
lb = pickle.loads(open(config.ENCODER_PATH, "rb").read())
# load the input image from disk
image = cv2.imread("images/download.jpeg")
image_ori = imutils.resize(image, width=500)
image = imutils.resize(image, width=500)
# run selective search on the image to generate bounding box proposal
# regions
print("[INFO] running selective search...")
ss = cv2.ximgproc.segmentation.createSelectiveSearchSegmentation()
ss.setBaseImage(image)
# ss.switchToSelectiveSearchFast()
ss.switchToSelectiveSearchQuality()
rects = ss.process()

# initialize the list of region proposals that we'll be classifying
# along with their associated bounding boxes
proposals = []
boxes = []

# loop over the region proposal bounding box coordinates generated by
# running selective search
for (x, y, w, h) in rects[:config.MAX_PROPOSALS_INFER]:
    # extract the region from the input image, convert it from BGR to
    # RGB channel ordering, and then resize it to the required input
    # dimensions of our trained CNN
    roi = image[y:y + h, x:x + w]
    roi = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)
    roi = cv2.resize(roi, config.INPUT_DIMS, interpolation=cv2.INTER_CUBIC)
    # further preprocess the ROI
    roi = img_to_array(roi)
    roi = preprocess_input(roi)
    # update our proposals and bounding boxes lists
    proposals.append(roi)
    boxes.append((x, y, x + w, y + h))

# convert the proposals and bounding boxes into NumPy arrays
proposals = np.array(proposals, dtype="float32")
boxes = np.array(boxes, dtype="int32")
print("[INFO] proposal shape: {}".format(proposals.shape))
# classify each of the proposal ROIs using fine-tuned model
print("[INFO] classifying proposals...")
proba = model.predict(proposals)

# find the index of all predictions that are positive for the
# "raccoon" class
print("[INFO] applying NMS...")
labels = lb.classes_[np.argmax(proba, axis=1)]
idxs = np.where(labels == "tfsign")[0]

# use the indexes to extract all bounding boxes and associated class
# label probabilities associated with the "raccoon" class
boxes = boxes[idxs]
proba = proba[idxs][:, 1]

# further filter indexes by enforcing a minimum prediction
# probability be met
idxs = np.where(proba >= config.MIN_PROBA)
boxes = boxes[idxs]
proba = proba[idxs]

# run non-maxima suppression on the bounding boxes
boxIdxs = non_max_suppression(boxes, proba)
print(boxIdxs)
for (startX, startY, endX, endY) in boxIdxs:
    # draw the bounding box and label on the image
    # imgzone = cv2.imwrite('temp.jpeg', image[startY:endY, startX:endX])
    cv2.imwrite('temp/temp.jpg', image_ori[startY:endY, startX:endX])
    sp = simplepreprocessor.SimplePreprocessor(32, 32)  # Thiết lập kích thước ảnh 32 x 32
    iap = imagetoarraypreprocessor.ImageToArrayPreprocessor()  # Gọi hàm để chuyển ảnh sang mảng
    # Nạp dataset từ đĩa rồi co dãn mức xám của pixel trong vùng [0,1]
    sdl = simpledatasetloader.SimpleDatasetLoader(preprocessors=[sp, iap])
    (data, labels) = sdl.load(['temp\\temp.jpg'])
    data = data.astype("float") / 255.0
    # Dự đoán
    print("[INFO] Đang dự đoán để phân lớp...")

    print(data)
    preds = modelClassify.predict(data, batch_size=32).argmax(axis=1)
    print(preds)
    try:
        text = preds[0]
    except:
        text = 'Unknow'
    print(text)
    # Dự đoán
    # print("[INFO] Đang dự đoán để phân lớp...")
    # image_part = cv2.resize(image[startY:endY, startX:endX], (32, 32), interpolation=cv2.INTER_AREA)
    # print(image_part.shape)
    # preds = modelClassify.predict(image_part, batch_size=32).argmax(axis=1)
    # text = classLabels[preds[0]]
    # print(text)
    cv2.rectangle(image, (startX, startY), (endX, endY), (255, 0, 0), 1)
    y = startY - 10 if startY - 10 > 10 else startY + 10
    cv2.putText(image, str(classLabels[text]), (startX, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)

cv2.imshow("Object Detection", image)
cv2.waitKey(0)